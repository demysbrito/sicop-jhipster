package br.gov.pa.semas.sicop.domain;

import static br.gov.pa.semas.sicop.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AjudaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAjudaAllPropertiesEquals(Ajuda expected, Ajuda actual) {
        assertAjudaAutoGeneratedPropertiesEquals(expected, actual);
        assertAjudaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAjudaAllUpdatablePropertiesEquals(Ajuda expected, Ajuda actual) {
        assertAjudaUpdatableFieldsEquals(expected, actual);
        assertAjudaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAjudaAutoGeneratedPropertiesEquals(Ajuda expected, Ajuda actual) {
        assertThat(expected)
            .as("Verify Ajuda auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAjudaUpdatableFieldsEquals(Ajuda expected, Ajuda actual) {
        assertThat(expected)
            .as("Verify Ajuda relevant properties")
            .satisfies(e -> assertThat(e.getTitulo()).as("check titulo").isEqualTo(actual.getTitulo()))
            .satisfies(e -> assertThat(e.getConteudo()).as("check conteudo").isEqualTo(actual.getConteudo()))
            .satisfies(e -> assertThat(e.getAtivo()).as("check ativo").isEqualTo(actual.getAtivo()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeletedAt())
                        .as("check deletedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getDeletedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAjudaUpdatableRelationshipsEquals(Ajuda expected, Ajuda actual) {
        assertThat(expected)
            .as("Verify Ajuda relationships")
            .satisfies(e -> assertThat(e.getTopicos()).as("check topicos").isEqualTo(actual.getTopicos()));
    }
}
